name: 发布模块

on:
    push:
        branches:
            - main
    pull_request:
        types:
            - closed
        branches:
            - main
    workflow_dispatch:
        inputs:
            version_type:
                description: '版本更新类型 (patch, minor, major)'
                required: true
                default: 'patch'
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    verify:
        name: 代码验证
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
        steps:
            - name: 检出代码
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: 设置Go环境
              uses: actions/setup-go@v4
              with:
                  go-version: '>=1.21.0'
                  cache: true

            - name: 验证依赖
              run: go mod verify

            - name: 运行测试
              run: go test -v ./...

    release:
        name: 创建发布
        needs: verify
        runs-on: ubuntu-latest
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
        steps:
            - name: 检出代码
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - name: 设置Go环境
              uses: actions/setup-go@v4
              with:
                  go-version: '>=1.21.0'
                  cache: true

            - name: 整理Go依赖
              run: go mod tidy

            # 手动版本更新处理（用于workflow_dispatch触发时）
            - name: 获取最新标签用于手动发布
              if: github.event_name == 'workflow_dispatch'
              id: latest_tag
              run: |
                  echo "LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.0.0')" >> $GITHUB_ENV
                  echo "当前最新标签: ${{ env.LATEST_TAG }}"

            - name: 确定手动发布的新版本
              if: github.event_name == 'workflow_dispatch'
              id: new_version
              run: |
                  LATEST_VERSION=${LATEST_TAG#v}
                  IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_VERSION"
                  MAJOR=${VERSION_PARTS[0]:-0}
                  MINOR=${VERSION_PARTS[1]:-0}
                  PATCH=${VERSION_PARTS[2]:-0}

                  # 根据输入或默认更新相应的版本号
                  VERSION_TYPE="${{ github.event.inputs.version_type }}"

                  if [ "$VERSION_TYPE" = "major" ]; then
                    MAJOR=$((MAJOR+1))
                    MINOR=0
                    PATCH=0
                  elif [ "$VERSION_TYPE" = "minor" ]; then
                    MINOR=$((MINOR+1))
                    PATCH=0
                  else
                    PATCH=$((PATCH+1))
                  fi

                  NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
                  echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
                  echo "新版本将是: $NEW_VERSION (类型: $VERSION_TYPE)"

            # 使用conventional-changelog生成分类的变更日志（用于workflow_dispatch触发时）
            - name: 为手动发布设置Node.js
              if: github.event_name == 'workflow_dispatch'
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: 安装conventional-changelog-cli用于手动发布
              if: github.event_name == 'workflow_dispatch'
              run: npm install -g conventional-changelog-cli

            - name: 生成手动发布的分类变更日志
              if: github.event_name == 'workflow_dispatch'
              run: |
                  conventional-changelog -p angular -i CHANGELOG.md -s -r 0
                  echo "# 版本 ${{ env.NEW_VERSION }}" > RELEASE_NOTES.md
                  echo "" >> RELEASE_NOTES.md
                  echo "发布日期: $(date +"%Y-%m-%d")" >> RELEASE_NOTES.md
                  echo "" >> RELEASE_NOTES.md
                  conventional-changelog -p angular -r 2 >> RELEASE_NOTES.md

            # 创建手动发布
            - name: 创建手动发布
              if: github.event_name == 'workflow_dispatch'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ env.NEW_VERSION }}
                  name: 发布 ${{ env.NEW_VERSION }}
                  body_path: RELEASE_NOTES.md
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # 自动语义化发布（用于push或PR合并触发时）
            - name: 为语义化发布设置Node.js
              if: github.event_name != 'workflow_dispatch'
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: 安装semantic-release依赖
              if: github.event_name != 'workflow_dispatch'
              run: |
                  npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

            - name: 执行语义化发布
              if: github.event_name != 'workflow_dispatch'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: npx semantic-release

            # 提交go.mod和go.sum的更改
            - name: 提交并推送依赖更改
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  if git diff --quiet --exit-code go.mod go.sum; then
                    echo "没有需要提交的更改"
                  else
                    git add go.mod go.sum
                    VERSION="${{ env.NEW_VERSION || 'latest' }}"
                    git commit -m "chore(deps): 更新依赖版本 for $VERSION"
                    git push
                  fi
