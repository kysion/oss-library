// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// OssServiceProviderConfigDao is the data access object for table oss_service_provider_config.
type OssServiceProviderConfigDao struct {
	table   string                          // table is the underlying table name of the DAO.
	group   string                          // group is the database configuration group name of current DAO.
	columns OssServiceProviderConfigColumns // columns contains all the column names of Table for convenient usage.
}

// OssServiceProviderConfigColumns defines and stores column names for table oss_service_provider_config.
type OssServiceProviderConfigColumns struct {
	Id              string //
	ProviderName    string // 渠道商名称
	ProviderNo      string // 渠道商编号
	AccessKeyId     string // 身份标识
	AccessKeySecret string // 身份认证密钥
	Token           string // 安全令牌
	BasePath        string // 域名
	Endpoint        string // bucket调用域名
	Remark          string // 备注
	Status          string // 状态：0禁用 1启用
	ExtJson         string // 拓展字段
	Region          string // 地域
	CreatedAt       string //
	UpdatedAt       string //
	DeletedAt       string //
}

// ossServiceProviderConfigColumns holds the columns for table oss_service_provider_config.
var ossServiceProviderConfigColumns = OssServiceProviderConfigColumns{
	Id:              "id",
	ProviderName:    "provider_name",
	ProviderNo:      "provider_no",
	AccessKeyId:     "access_key_id",
	AccessKeySecret: "access_key_secret",
	Token:           "token",
	BasePath:        "base_path",
	Endpoint:        "endpoint",
	Remark:          "remark",
	Status:          "status",
	ExtJson:         "ext_json",
	Region:          "region",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

// NewOssServiceProviderConfigDao creates and returns a new DAO object for table data access.
func NewOssServiceProviderConfigDao(proxy ...dao_interface.IDao) *OssServiceProviderConfigDao {
	var dao *OssServiceProviderConfigDao
	if len(proxy) > 0 {
		dao = &OssServiceProviderConfigDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: ossServiceProviderConfigColumns,
		}
		return dao
	}

	return &OssServiceProviderConfigDao{
		group:   "default",
		table:   "oss_service_provider_config",
		columns: ossServiceProviderConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OssServiceProviderConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *OssServiceProviderConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *OssServiceProviderConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *OssServiceProviderConfigDao) Columns() OssServiceProviderConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OssServiceProviderConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *OssServiceProviderConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OssServiceProviderConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
