// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// OssBucketConfigDao is the data access object for table oss_bucket_config.
type OssBucketConfigDao struct {
	dao_interface.IDao
	table       string                 // table is the underlying table name of the DAO.
	group       string                 // group is the database configuration group name of current DAO.
	columns     OssBucketConfigColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// OssBucketConfigColumns defines and stores column names for table oss_bucket_config.
type OssBucketConfigColumns struct {
	Id            string //
	BucketName    string // 存储空间名称
	Endpoint      string // Bucket 的地域域名
	StorageType   string // 存储类型
	RedundantType string // 冗余类型
	MonthlyFlow   string // 当月流量
	VisitsNum     string // 访问次数
	UnionMainId   string // 主体ID
	OwnerId       string // 拥有者ID，（阿里云OSS：阿里云账号的APPID、）
	CreatedAt     string //
	UpdatedAt     string //
	DeletedAt     string //
	ProviderNo    string // 渠道商编号
	State         string // 状态：0禁用 1正常
	BucketDomain  string // Bucket的访问域名
}

// ossBucketConfigColumns holds the columns for table oss_bucket_config.
var ossBucketConfigColumns = OssBucketConfigColumns{
	Id:            "id",
	BucketName:    "bucket_name",
	Endpoint:      "endpoint",
	StorageType:   "storage_type",
	RedundantType: "redundant_type",
	MonthlyFlow:   "monthly_flow",
	VisitsNum:     "visits_num",
	UnionMainId:   "union_main_id",
	OwnerId:       "owner_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	ProviderNo:    "provider_no",
	State:         "state",
	BucketDomain:  "bucket_domain",
}

// NewOssBucketConfigDao creates and returns a new DAO object for table data access.
func NewOssBucketConfigDao(proxy ...dao_interface.IDao) *OssBucketConfigDao {
	var dao *OssBucketConfigDao
	if len(proxy) > 0 {
		dao = &OssBucketConfigDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     ossBucketConfigColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &OssBucketConfigDao{
		group:   "default",
		table:   "oss_bucket_config",
		columns: ossBucketConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OssBucketConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *OssBucketConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *OssBucketConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *OssBucketConfigDao) Columns() OssBucketConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OssBucketConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *OssBucketConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OssBucketConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *OssBucketConfigDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *OssBucketConfigDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *OssBucketConfigDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *OssBucketConfigDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
